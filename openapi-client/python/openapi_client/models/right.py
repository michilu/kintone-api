# coding: utf-8

"""
    Kintone REST API

    Kintone REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Right(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'record_importable': 'bool',
        'app_editable': 'bool',
        'record_exportable': 'bool',
        'record_addable': 'bool',
        'record_viewable': 'bool',
        'record_editable': 'bool',
        'include_subs': 'bool',
        'record_deletable': 'bool',
        'entity': 'RightEntity'
    }

    attribute_map = {
        'record_importable': 'recordImportable',
        'app_editable': 'appEditable',
        'record_exportable': 'recordExportable',
        'record_addable': 'recordAddable',
        'record_viewable': 'recordViewable',
        'record_editable': 'recordEditable',
        'include_subs': 'includeSubs',
        'record_deletable': 'recordDeletable',
        'entity': 'entity'
    }

    def __init__(self, record_importable=None, app_editable=None, record_exportable=None, record_addable=None, record_viewable=None, record_editable=None, include_subs=None, record_deletable=None, entity=None, local_vars_configuration=None):  # noqa: E501
        """Right - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._record_importable = None
        self._app_editable = None
        self._record_exportable = None
        self._record_addable = None
        self._record_viewable = None
        self._record_editable = None
        self._include_subs = None
        self._record_deletable = None
        self._entity = None
        self.discriminator = None

        if record_importable is not None:
            self.record_importable = record_importable
        if app_editable is not None:
            self.app_editable = app_editable
        if record_exportable is not None:
            self.record_exportable = record_exportable
        if record_addable is not None:
            self.record_addable = record_addable
        if record_viewable is not None:
            self.record_viewable = record_viewable
        if record_editable is not None:
            self.record_editable = record_editable
        if include_subs is not None:
            self.include_subs = include_subs
        if record_deletable is not None:
            self.record_deletable = record_deletable
        if entity is not None:
            self.entity = entity

    @property
    def record_importable(self):
        """Gets the record_importable of this Right.  # noqa: E501


        :return: The record_importable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._record_importable

    @record_importable.setter
    def record_importable(self, record_importable):
        """Sets the record_importable of this Right.


        :param record_importable: The record_importable of this Right.  # noqa: E501
        :type: bool
        """

        self._record_importable = record_importable

    @property
    def app_editable(self):
        """Gets the app_editable of this Right.  # noqa: E501


        :return: The app_editable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._app_editable

    @app_editable.setter
    def app_editable(self, app_editable):
        """Sets the app_editable of this Right.


        :param app_editable: The app_editable of this Right.  # noqa: E501
        :type: bool
        """

        self._app_editable = app_editable

    @property
    def record_exportable(self):
        """Gets the record_exportable of this Right.  # noqa: E501


        :return: The record_exportable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._record_exportable

    @record_exportable.setter
    def record_exportable(self, record_exportable):
        """Sets the record_exportable of this Right.


        :param record_exportable: The record_exportable of this Right.  # noqa: E501
        :type: bool
        """

        self._record_exportable = record_exportable

    @property
    def record_addable(self):
        """Gets the record_addable of this Right.  # noqa: E501


        :return: The record_addable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._record_addable

    @record_addable.setter
    def record_addable(self, record_addable):
        """Sets the record_addable of this Right.


        :param record_addable: The record_addable of this Right.  # noqa: E501
        :type: bool
        """

        self._record_addable = record_addable

    @property
    def record_viewable(self):
        """Gets the record_viewable of this Right.  # noqa: E501


        :return: The record_viewable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._record_viewable

    @record_viewable.setter
    def record_viewable(self, record_viewable):
        """Sets the record_viewable of this Right.


        :param record_viewable: The record_viewable of this Right.  # noqa: E501
        :type: bool
        """

        self._record_viewable = record_viewable

    @property
    def record_editable(self):
        """Gets the record_editable of this Right.  # noqa: E501


        :return: The record_editable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._record_editable

    @record_editable.setter
    def record_editable(self, record_editable):
        """Sets the record_editable of this Right.


        :param record_editable: The record_editable of this Right.  # noqa: E501
        :type: bool
        """

        self._record_editable = record_editable

    @property
    def include_subs(self):
        """Gets the include_subs of this Right.  # noqa: E501


        :return: The include_subs of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._include_subs

    @include_subs.setter
    def include_subs(self, include_subs):
        """Sets the include_subs of this Right.


        :param include_subs: The include_subs of this Right.  # noqa: E501
        :type: bool
        """

        self._include_subs = include_subs

    @property
    def record_deletable(self):
        """Gets the record_deletable of this Right.  # noqa: E501


        :return: The record_deletable of this Right.  # noqa: E501
        :rtype: bool
        """
        return self._record_deletable

    @record_deletable.setter
    def record_deletable(self, record_deletable):
        """Sets the record_deletable of this Right.


        :param record_deletable: The record_deletable of this Right.  # noqa: E501
        :type: bool
        """

        self._record_deletable = record_deletable

    @property
    def entity(self):
        """Gets the entity of this Right.  # noqa: E501


        :return: The entity of this Right.  # noqa: E501
        :rtype: RightEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Right.


        :param entity: The entity of this Right.  # noqa: E501
        :type: RightEntity
        """

        self._entity = entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Right):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Right):
            return True

        return self.to_dict() != other.to_dict()
